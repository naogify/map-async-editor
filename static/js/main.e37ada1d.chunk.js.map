{"version":3,"sources":["config.js","App.js","reportWebVitals.js","index.js"],"names":["Config","apiUrl","process","App","mapNode","React","useRef","useEffect","ws","WebSocket","map","window","geolonia","Map","container","current","draw","MapboxDraw","displayControlsDefault","controls","polygon","trash","addControl","updateArea","e","freatures","data","action","send","JSON","stringify","error","console","log","sendFeatures","getAll","on","onopen","onclose","onmessage","event","rereceivedFeatureCollection","parse","features","length","deleteAll","set","id","ref","data-lat","data-lng","data-zoom","data-marker","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAIeA,G,YAJA,CACXC,OAAQC,kE,OCwFGC,MAnFf,WAEE,IAAMC,EAAUC,IAAMC,OAAO,MAmE7B,OAjEAC,qBAAU,WAGR,IAAMC,EAAK,IAAIC,UAAUT,EAAOC,QAEhC,GAAIO,GAAOJ,EAAX,CALc,IAWRM,EAAM,IADSC,OAAbC,SACiBC,IAAI,CAC3BC,UAAWV,EAAQW,UAGfC,EAAO,IAAIC,IAAW,CACxBC,wBAAwB,EACxBC,SAAU,CACNC,SAAS,EACTC,OAAO,KAGfX,EAAIY,WAAWN,GAEf,IAYMO,EAAa,SAACC,IAZD,SAACC,GAClB,IAAMC,EAAO,CACXC,OAAQ,cACRD,KAAMD,GAER,IACIjB,EAAGoB,KAAKC,KAAKC,UAAUJ,IACzB,MAAOK,GACLC,QAAQC,IAAIF,IAMhBG,CADkBlB,EAAKmB,WAIzBzB,EAAI0B,GAAG,cAAeb,GACtBb,EAAI0B,GAAG,cAAeb,GACtBb,EAAI0B,GAAG,cAAeb,GAItBf,EAAG6B,OAAS,WACVL,QAAQC,IAAI,cAGdzB,EAAG8B,QAAU,WACXN,QAAQC,IAAI,iBAGdzB,EAAG+B,UAAY,SAAAC,GACb,IAAMC,EAA8BZ,KAAKa,MAAMF,EAAMd,MACpBV,EAAKmB,SACVQ,SAASC,SAAWH,EAA4BE,SAASC,SACnF5B,EAAK6B,YACL7B,EAAK8B,IAAIL,QAGZ,IAGD,mCACE,qBACEM,GAAG,MACHC,IAAK5C,EACL6C,WAAS,UACTC,WAAS,WACTC,YAAU,KACVC,cAAY,WCvELC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e37ada1d.chunk.js","sourcesContent":["const Config = {\n    apiUrl: process.env.REACT_APP_API_URL || '',\n};\n  \nexport default Config;","import React, { useEffect } from \"react\"\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css'\nimport './App.css'\nimport Config from './config';\n\nfunction App() {\n\n  const mapNode = React.useRef(null);\n\n  useEffect(() => {\n\n    // instance of websocket connection as a class property\n    const ws = new WebSocket(Config.apiUrl) \n\n    if(!ws || !mapNode){\n      return\n    }\n\n    // @ts-ignore\n    const { geolonia } = window;\n    const map = new geolonia.Map({\n      container: mapNode.current\n    });\n\n    const draw = new MapboxDraw({\n        displayControlsDefault: false,\n        controls: {\n            polygon: true,\n            trash: true\n        }\n    });\n    map.addControl(draw);\n\n    const sendFeatures=(freatures)=>{\n      const data = {\n        action: \"sendmessage\",\n        data: freatures\n      }\n      try {\n          ws.send(JSON.stringify(data))\n      } catch (error) {\n          console.log(error)\n      }\n    }\n\n    const updateArea = (e) => {ã€€\n      const freatures = draw.getAll();\n      sendFeatures(freatures)\n    }\n\n    map.on('draw.create', updateArea);\n    map.on('draw.delete', updateArea);\n    map.on('draw.update', updateArea);\n\n\n    // Websocket \n    ws.onopen = () => {\n      console.log('connected')\n    }\n\n    ws.onclose = () => {\n      console.log('disconnected')\n    }\n\n    ws.onmessage = event => {\n      const rereceivedFeatureCollection = JSON.parse(event.data)\n      const currentFeatureCollection = draw.getAll();\n      if(currentFeatureCollection.features.length !== rereceivedFeatureCollection.features.length){\n        draw.deleteAll()\n        draw.set(rereceivedFeatureCollection)\n      }\n    }\n  }, []);\n\n  return (\n    <>\n      <div\n        id=\"map\"\n        ref={mapNode}\n        data-lat=\"35.6759\"\n        data-lng=\"139.7449\"\n        data-zoom=\"14\"\n        data-marker=\"off\"\n      ></div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}